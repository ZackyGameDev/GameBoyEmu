// THIS FILE IS GENERATED BY codewriter.py

#include <SM83.h>

uint8_t SM83::NOP() { return 0; }
uint8_t SM83::LD_BC_n16() { return LD16({BC, true}, {N16, true}); }
uint8_t SM83::LD_aBC_A() { return LD({BC, false}, {A, true}); }
uint8_t SM83::INC_BC() { return PROCESS_ALU16({BC, true}, INC); }
uint8_t SM83::INC_B() { return PROCESS_ALU({B, true}, INC); }
uint8_t SM83::DEC_B() { return PROCESS_ALU({B, true}, DEC); }
uint8_t SM83::LD_B_n8() { return LD({B, true}, {N8, true}); }
uint8_t SM83::RLCA() { return ROTATEREGALEFT(false, false); }
uint8_t SM83::LD_aa16_SP() { return LD16({A16, false}, {SP, true}); }
uint8_t SM83::ADD_HL_BC() { return PROCESS_ALU16({HL, true}, {BC, true}, ADD); }
uint8_t SM83::LD_A_aBC() { return LD({A, true}, {BC, false}); }
uint8_t SM83::DEC_BC() { return PROCESS_ALU16({BC, true}, DEC); }
uint8_t SM83::INC_C() { return PROCESS_ALU({C, true}, INC); }
uint8_t SM83::DEC_C() { return PROCESS_ALU({C, true}, DEC); }
uint8_t SM83::LD_C_n8() { return LD({C, true}, {N8, true}); }
uint8_t SM83::RRCA() { return ROTATEREGALEFT(true, false); }
uint8_t SM83::STOP_n8() { pc++; return 0; }
uint8_t SM83::LD_DE_n16() { return LD16({DE, true}, {N16, true}); }
uint8_t SM83::LD_aDE_A() { return LD({DE, false}, {A, true}); }
uint8_t SM83::INC_DE() { return PROCESS_ALU16({DE, true}, INC); }
uint8_t SM83::INC_D() { return PROCESS_ALU({D, true}, INC); }
uint8_t SM83::DEC_D() { return PROCESS_ALU({D, true}, DEC); }
uint8_t SM83::LD_D_n8() { return LD({D, true}, {N8, true}); }
uint8_t SM83::RLA() { return ROTATEREGALEFT(false, true); }
uint8_t SM83::JR_e8() { return JUMPTO({E8, true}); }
uint8_t SM83::ADD_HL_DE() { return PROCESS_ALU16({HL, true}, {DE, true}, ADD); }
uint8_t SM83::LD_A_aDE() { return LD({A, true}, {DE, false}); }
uint8_t SM83::DEC_DE() { return PROCESS_ALU16({DE, true}, DEC); }
uint8_t SM83::INC_E() { return PROCESS_ALU({E, true}, INC); }
uint8_t SM83::DEC_E() { return PROCESS_ALU({E, true}, DEC); }
uint8_t SM83::LD_E_n8() { return LD({E, true}, {N8, true}); }
uint8_t SM83::RRA() { return ROTATEREGALEFT(true, true); }
uint8_t SM83::JR_NZ_e8() { return JUMPTO(NZ, {E8, true}); }
uint8_t SM83::LD_HL_n16() { return LD16({HL, true}, {N16, true}); }
uint8_t SM83::LD_aHLI_A() { return LD({HL, false, .increment=true}, {A, true}); }
uint8_t SM83::INC_HL() { return PROCESS_ALU16({HL, true}, INC); }
uint8_t SM83::INC_H() { return PROCESS_ALU({H, true}, INC); }
uint8_t SM83::DEC_H() { return PROCESS_ALU({H, true}, DEC); }
uint8_t SM83::LD_H_n8() { return LD({H, true}, {N8, true}); }
uint8_t SM83::DAA() { return PROCESS_ALU(enumDAA); }
uint8_t SM83::JR_Z_e8() { return JUMPTO(Z, {E8, true}); }
uint8_t SM83::ADD_HL_HL() { return PROCESS_ALU16({HL, true}, {HL, true}, ADD); }
uint8_t SM83::LD_A_aHLI() { return LD({A, true}, {HL, false, .increment=true}); }
uint8_t SM83::DEC_HL() { return PROCESS_ALU16({HL, true}, DEC); }
uint8_t SM83::INC_L() { return PROCESS_ALU({L, true}, INC); }
uint8_t SM83::DEC_L() { return PROCESS_ALU({L, true}, DEC); }
uint8_t SM83::LD_L_n8() { return LD({L, true}, {N8, true}); }
uint8_t SM83::CPL() { return PROCESS_ALU(enumCPL); }
uint8_t SM83::JR_NC_e8() { return JUMPTO(NC, {E8, true}); }
uint8_t SM83::LD_SP_n16() { return LD16({SP, true}, {N16, true}); }
uint8_t SM83::LD_aHLD_A() { return LD({HL, false, .decrement=true}, {A, true}); }
uint8_t SM83::INC_SP() { return PROCESS_ALU16({SP, true}, INC); }
uint8_t SM83::INC_aHL() { return PROCESS_ALU({HL, false}, INC); }
uint8_t SM83::DEC_aHL() { return PROCESS_ALU({HL, false}, DEC); }
uint8_t SM83::LD_aHL_n8() { return LD({HL, false}, {N8, true}); }
uint8_t SM83::SCF() { return PROCESS_ALU(enumSCF); }
uint8_t SM83::JR_C_e8() { return JUMPTO(C, {E8, true}); }
uint8_t SM83::ADD_HL_SP() { return PROCESS_ALU16({HL, true}, {SP, true}, ADD); }
uint8_t SM83::LD_A_aHLD() { return LD({A, true}, {HL, false, .decrement=true}); }
uint8_t SM83::DEC_SP() { return PROCESS_ALU16({SP, true}, DEC); }
uint8_t SM83::INC_A() { return PROCESS_ALU({A, true}, INC); }
uint8_t SM83::DEC_A() { return PROCESS_ALU({A, true}, DEC); }
uint8_t SM83::LD_A_n8() { return LD({A, true}, {N8, true}); }
uint8_t SM83::CCF() { return PROCESS_ALU(enumCCF); }
uint8_t SM83::LD_B_B() { return LD({B, true}, {B, true}); }
uint8_t SM83::LD_B_C() { return LD({B, true}, {C, true}); }
uint8_t SM83::LD_B_D() { return LD({B, true}, {D, true}); }
uint8_t SM83::LD_B_E() { return LD({B, true}, {E, true}); }
uint8_t SM83::LD_B_H() { return LD({B, true}, {H, true}); }
uint8_t SM83::LD_B_L() { return LD({B, true}, {L, true}); }
uint8_t SM83::LD_B_aHL() { return LD({B, true}, {HL, false}); }
uint8_t SM83::LD_B_A() { return LD({B, true}, {A, true}); }
uint8_t SM83::LD_C_B() { return LD({C, true}, {B, true}); }
uint8_t SM83::LD_C_C() { return LD({C, true}, {C, true}); }
uint8_t SM83::LD_C_D() { return LD({C, true}, {D, true}); }
uint8_t SM83::LD_C_E() { return LD({C, true}, {E, true}); }
uint8_t SM83::LD_C_H() { return LD({C, true}, {H, true}); }
uint8_t SM83::LD_C_L() { return LD({C, true}, {L, true}); }
uint8_t SM83::LD_C_aHL() { return LD({C, true}, {HL, false}); }
uint8_t SM83::LD_C_A() { return LD({C, true}, {A, true}); }
uint8_t SM83::LD_D_B() { return LD({D, true}, {B, true}); }
uint8_t SM83::LD_D_C() { return LD({D, true}, {C, true}); }
uint8_t SM83::LD_D_D() { return LD({D, true}, {D, true}); }
uint8_t SM83::LD_D_E() { return LD({D, true}, {E, true}); }
uint8_t SM83::LD_D_H() { return LD({D, true}, {H, true}); }
uint8_t SM83::LD_D_L() { return LD({D, true}, {L, true}); }
uint8_t SM83::LD_D_aHL() { return LD({D, true}, {HL, false}); }
uint8_t SM83::LD_D_A() { return LD({D, true}, {A, true}); }
uint8_t SM83::LD_E_B() { return LD({E, true}, {B, true}); }
uint8_t SM83::LD_E_C() { return LD({E, true}, {C, true}); }
uint8_t SM83::LD_E_D() { return LD({E, true}, {D, true}); }
uint8_t SM83::LD_E_E() { return LD({E, true}, {E, true}); }
uint8_t SM83::LD_E_H() { return LD({E, true}, {H, true}); }
uint8_t SM83::LD_E_L() { return LD({E, true}, {L, true}); }
uint8_t SM83::LD_E_aHL() { return LD({E, true}, {HL, false}); }
uint8_t SM83::LD_E_A() { return LD({E, true}, {A, true}); }
uint8_t SM83::LD_H_B() { return LD({H, true}, {B, true}); }
uint8_t SM83::LD_H_C() { return LD({H, true}, {C, true}); }
uint8_t SM83::LD_H_D() { return LD({H, true}, {D, true}); }
uint8_t SM83::LD_H_E() { return LD({H, true}, {E, true}); }
uint8_t SM83::LD_H_H() { return LD({H, true}, {H, true}); }
uint8_t SM83::LD_H_L() { return LD({H, true}, {L, true}); }
uint8_t SM83::LD_H_aHL() { return LD({H, true}, {HL, false}); }
uint8_t SM83::LD_H_A() { return LD({H, true}, {A, true}); }
uint8_t SM83::LD_L_B() { return LD({L, true}, {B, true}); }
uint8_t SM83::LD_L_C() { return LD({L, true}, {C, true}); }
uint8_t SM83::LD_L_D() { return LD({L, true}, {D, true}); }
uint8_t SM83::LD_L_E() { return LD({L, true}, {E, true}); }
uint8_t SM83::LD_L_H() { return LD({L, true}, {H, true}); }
uint8_t SM83::LD_L_L() { return LD({L, true}, {L, true}); }
uint8_t SM83::LD_L_aHL() { return LD({L, true}, {HL, false}); }
uint8_t SM83::LD_L_A() { return LD({L, true}, {A, true}); }
uint8_t SM83::LD_aHL_B() { return LD({HL, false}, {B, true}); }
uint8_t SM83::LD_aHL_C() { return LD({HL, false}, {C, true}); }
uint8_t SM83::LD_aHL_D() { return LD({HL, false}, {D, true}); }
uint8_t SM83::LD_aHL_E() { return LD({HL, false}, {E, true}); }
uint8_t SM83::LD_aHL_H() { return LD({HL, false}, {H, true}); }
uint8_t SM83::LD_aHL_L() { return LD({HL, false}, {L, true}); }
uint8_t SM83::HALT() { return HANDLE_HALT(); return 0; }
uint8_t SM83::LD_aHL_A() { return LD({HL, false}, {A, true}); }
uint8_t SM83::LD_A_B() { return LD({A, true}, {B, true}); }
uint8_t SM83::LD_A_C() { return LD({A, true}, {C, true}); }
uint8_t SM83::LD_A_D() { return LD({A, true}, {D, true}); }
uint8_t SM83::LD_A_E() { return LD({A, true}, {E, true}); }
uint8_t SM83::LD_A_H() { return LD({A, true}, {H, true}); }
uint8_t SM83::LD_A_L() { return LD({A, true}, {L, true}); }
uint8_t SM83::LD_A_aHL() { return LD({A, true}, {HL, false}); }
uint8_t SM83::LD_A_A() { return LD({A, true}, {A, true}); }
uint8_t SM83::ADD_A_B() { return PROCESS_ALU({A, true}, {B, true}, ADD); }
uint8_t SM83::ADD_A_C() { return PROCESS_ALU({A, true}, {C, true}, ADD); }
uint8_t SM83::ADD_A_D() { return PROCESS_ALU({A, true}, {D, true}, ADD); }
uint8_t SM83::ADD_A_E() { return PROCESS_ALU({A, true}, {E, true}, ADD); }
uint8_t SM83::ADD_A_H() { return PROCESS_ALU({A, true}, {H, true}, ADD); }
uint8_t SM83::ADD_A_L() { return PROCESS_ALU({A, true}, {L, true}, ADD); }
uint8_t SM83::ADD_A_aHL() { return PROCESS_ALU({A, true}, {HL, false}, ADD); }
uint8_t SM83::ADD_A_A() { return PROCESS_ALU({A, true}, {A, true}, ADD); }
uint8_t SM83::ADC_A_B() { return PROCESS_ALU({A, true}, {B, true}, ADC); }
uint8_t SM83::ADC_A_C() { return PROCESS_ALU({A, true}, {C, true}, ADC); }
uint8_t SM83::ADC_A_D() { return PROCESS_ALU({A, true}, {D, true}, ADC); }
uint8_t SM83::ADC_A_E() { return PROCESS_ALU({A, true}, {E, true}, ADC); }
uint8_t SM83::ADC_A_H() { return PROCESS_ALU({A, true}, {H, true}, ADC); }
uint8_t SM83::ADC_A_L() { return PROCESS_ALU({A, true}, {L, true}, ADC); }
uint8_t SM83::ADC_A_aHL() { return PROCESS_ALU({A, true}, {HL, false}, ADC); }
uint8_t SM83::ADC_A_A() { return PROCESS_ALU({A, true}, {A, true}, ADC); }
uint8_t SM83::SUB_A_B() { return PROCESS_ALU({A, true}, {B, true}, SUB); }
uint8_t SM83::SUB_A_C() { return PROCESS_ALU({A, true}, {C, true}, SUB); }
uint8_t SM83::SUB_A_D() { return PROCESS_ALU({A, true}, {D, true}, SUB); }
uint8_t SM83::SUB_A_E() { return PROCESS_ALU({A, true}, {E, true}, SUB); }
uint8_t SM83::SUB_A_H() { return PROCESS_ALU({A, true}, {H, true}, SUB); }
uint8_t SM83::SUB_A_L() { return PROCESS_ALU({A, true}, {L, true}, SUB); }
uint8_t SM83::SUB_A_aHL() { return PROCESS_ALU({A, true}, {HL, false}, SUB); }
uint8_t SM83::SUB_A_A() { return PROCESS_ALU({A, true}, {A, true}, SUB); }
uint8_t SM83::SBC_A_B() { return PROCESS_ALU({A, true}, {B, true}, SBC); }
uint8_t SM83::SBC_A_C() { return PROCESS_ALU({A, true}, {C, true}, SBC); }
uint8_t SM83::SBC_A_D() { return PROCESS_ALU({A, true}, {D, true}, SBC); }
uint8_t SM83::SBC_A_E() { return PROCESS_ALU({A, true}, {E, true}, SBC); }
uint8_t SM83::SBC_A_H() { return PROCESS_ALU({A, true}, {H, true}, SBC); }
uint8_t SM83::SBC_A_L() { return PROCESS_ALU({A, true}, {L, true}, SBC); }
uint8_t SM83::SBC_A_aHL() { return PROCESS_ALU({A, true}, {HL, false}, SBC); }
uint8_t SM83::SBC_A_A() { return PROCESS_ALU({A, true}, {A, true}, SBC); }
uint8_t SM83::AND_A_B() { return PROCESS_ALU({A, true}, {B, true}, AND); }
uint8_t SM83::AND_A_C() { return PROCESS_ALU({A, true}, {C, true}, AND); }
uint8_t SM83::AND_A_D() { return PROCESS_ALU({A, true}, {D, true}, AND); }
uint8_t SM83::AND_A_E() { return PROCESS_ALU({A, true}, {E, true}, AND); }
uint8_t SM83::AND_A_H() { return PROCESS_ALU({A, true}, {H, true}, AND); }
uint8_t SM83::AND_A_L() { return PROCESS_ALU({A, true}, {L, true}, AND); }
uint8_t SM83::AND_A_aHL() { return PROCESS_ALU({A, true}, {HL, false}, AND); }
uint8_t SM83::AND_A_A() { return PROCESS_ALU({A, true}, {A, true}, AND); }
uint8_t SM83::XOR_A_B() { return PROCESS_ALU({A, true}, {B, true}, XOR); }
uint8_t SM83::XOR_A_C() { return PROCESS_ALU({A, true}, {C, true}, XOR); }
uint8_t SM83::XOR_A_D() { return PROCESS_ALU({A, true}, {D, true}, XOR); }
uint8_t SM83::XOR_A_E() { return PROCESS_ALU({A, true}, {E, true}, XOR); }
uint8_t SM83::XOR_A_H() { return PROCESS_ALU({A, true}, {H, true}, XOR); }
uint8_t SM83::XOR_A_L() { return PROCESS_ALU({A, true}, {L, true}, XOR); }
uint8_t SM83::XOR_A_aHL() { return PROCESS_ALU({A, true}, {HL, false}, XOR); }
uint8_t SM83::XOR_A_A() { return PROCESS_ALU({A, true}, {A, true}, XOR); }
uint8_t SM83::OR_A_B() { return PROCESS_ALU({A, true}, {B, true}, OR); }
uint8_t SM83::OR_A_C() { return PROCESS_ALU({A, true}, {C, true}, OR); }
uint8_t SM83::OR_A_D() { return PROCESS_ALU({A, true}, {D, true}, OR); }
uint8_t SM83::OR_A_E() { return PROCESS_ALU({A, true}, {E, true}, OR); }
uint8_t SM83::OR_A_H() { return PROCESS_ALU({A, true}, {H, true}, OR); }
uint8_t SM83::OR_A_L() { return PROCESS_ALU({A, true}, {L, true}, OR); }
uint8_t SM83::OR_A_aHL() { return PROCESS_ALU({A, true}, {HL, false}, OR); }
uint8_t SM83::OR_A_A() { return PROCESS_ALU({A, true}, {A, true}, OR); }
uint8_t SM83::CP_A_B() { return PROCESS_ALU({A, true}, {B, true}, CP); }
uint8_t SM83::CP_A_C() { return PROCESS_ALU({A, true}, {C, true}, CP); }
uint8_t SM83::CP_A_D() { return PROCESS_ALU({A, true}, {D, true}, CP); }
uint8_t SM83::CP_A_E() { return PROCESS_ALU({A, true}, {E, true}, CP); }
uint8_t SM83::CP_A_H() { return PROCESS_ALU({A, true}, {H, true}, CP); }
uint8_t SM83::CP_A_L() { return PROCESS_ALU({A, true}, {L, true}, CP); }
uint8_t SM83::CP_A_aHL() { return PROCESS_ALU({A, true}, {HL, false}, CP); }
uint8_t SM83::CP_A_A() { return PROCESS_ALU({A, true}, {A, true}, CP); }
uint8_t SM83::RET_NZ() { return RETURNFROMFUNCTION(NZ); }
uint8_t SM83::POP_BC() { return POP({BC, true}); }
uint8_t SM83::JP_NZ_a16() { return JUMPTO(NZ, {A16, true}); }
uint8_t SM83::JP_a16() { return JUMPTO({A16, true}); }
uint8_t SM83::CALL_NZ_a16() { return CALL(NZ, {A16, true}); }
uint8_t SM83::PUSH_BC() { return PUSH({BC, true}); }
uint8_t SM83::ADD_A_n8() { return PROCESS_ALU({A, true}, {N8, true}, ADD); }
uint8_t SM83::RST_00() { return RST(0x00); }
uint8_t SM83::RET_Z() { return RETURNFROMFUNCTION(Z); }
uint8_t SM83::RET() { return POP({PC, true}); }
uint8_t SM83::JP_Z_a16() { return JUMPTO(Z, {A16, true}); }
uint8_t SM83::PREFIX() { return 0; }
uint8_t SM83::CALL_Z_a16() { return CALL(Z, {A16, true}); }
uint8_t SM83::CALL_a16() { return CALL({A16, true}); }
uint8_t SM83::ADC_A_n8() { return PROCESS_ALU({A, true}, {N8, true}, ADC); }
uint8_t SM83::RST_08() { return RST(0x08); }
uint8_t SM83::RET_NC() { return RETURNFROMFUNCTION(NC); }
uint8_t SM83::POP_DE() { return POP({DE, true}); }
uint8_t SM83::JP_NC_a16() { return JUMPTO(NC, {A16, true}); }
uint8_t SM83::ILLEGAL_D3() { return 0; }
uint8_t SM83::CALL_NC_a16() { return CALL(NC, {A16, true}); }
uint8_t SM83::PUSH_DE() { return PUSH({DE, true}); }
uint8_t SM83::SUB_A_n8() { return PROCESS_ALU({A, true}, {N8, true}, SUB); }
uint8_t SM83::RST_10() { return RST(0x10); }
uint8_t SM83::RET_C() { return RETURNFROMFUNCTION(C); }
uint8_t SM83::RETI() { return RETURNANDEI(); }
uint8_t SM83::JP_C_a16() { return JUMPTO(C, {A16, true}); }
uint8_t SM83::ILLEGAL_DB() { return 0; }
uint8_t SM83::CALL_C_a16() { return CALL(C, {A16, true}); }
uint8_t SM83::ILLEGAL_DD() { return 0; }
uint8_t SM83::SBC_A_n8() { return PROCESS_ALU({A, true}, {N8, true}, SBC); }
uint8_t SM83::RST_18() { return RST(0x18); }
uint8_t SM83::LDH_aa8_A() { return LDH({A8, false}, {A, true}); }
uint8_t SM83::POP_HL() { return POP({HL, true}); }
uint8_t SM83::LDH_aC_A() { return LDH({C, false}, {A, true}); }
uint8_t SM83::ILLEGAL_E3() { return 0; }
uint8_t SM83::ILLEGAL_E4() { return 0; }
uint8_t SM83::PUSH_HL() { return PUSH({HL, true}); }
uint8_t SM83::AND_A_n8() { return PROCESS_ALU({A, true}, {N8, true}, AND); }
uint8_t SM83::RST_20() { return RST(0x20); }
uint8_t SM83::ADD_SP_e8() { return PROCESS_ALU16({SP, true}, {E8, true}, ADD); }
uint8_t SM83::JP_HL() { return JUMPTO({HL, true}); }
uint8_t SM83::LD_aa16_A() { return LD({A16, false}, {A, true}); }
uint8_t SM83::ILLEGAL_EB() { return 0; }
uint8_t SM83::ILLEGAL_EC() { return 0; }
uint8_t SM83::ILLEGAL_ED() { return 0; }
uint8_t SM83::XOR_A_n8() { return PROCESS_ALU({A, true}, {N8, true}, XOR); }
uint8_t SM83::RST_28() { return RST(0x28); }
uint8_t SM83::LDH_A_aa8() { return LDH({A, true}, {A8, false}); }
uint8_t SM83::POP_AF() { return POP({AF, true}); }
uint8_t SM83::LDH_A_aC() { return LDH({A, true}, {C, false}); }
uint8_t SM83::DI() { return DISABLEINTERRUPTS(); }
uint8_t SM83::ILLEGAL_F4() { return 0; }
uint8_t SM83::PUSH_AF() { return PUSH({AF, true}); }
uint8_t SM83::OR_A_n8() { return PROCESS_ALU({A, true}, {N8, true}, OR); }
uint8_t SM83::RST_30() { return RST(0x30); }
uint8_t SM83::LD_HL_SPI_e8() { return LD_HL_SPDD(); }
uint8_t SM83::LD_SP_HL() { return LD16({SP, true}, {HL, true}); }
uint8_t SM83::LD_A_aa16() { return LD({A, true}, {A16, false}); }
uint8_t SM83::EI() { return ENABLEINTERRUPTS(); }
uint8_t SM83::ILLEGAL_FC() { return 0; }
uint8_t SM83::ILLEGAL_FD() { return 0; }
uint8_t SM83::CP_A_n8() { return PROCESS_ALU({A, true}, {N8, true}, CP); }
uint8_t SM83::RST_38() { return RST(0x38); }



// CB PREFIXED
uint8_t SM83::RLC_B() { return ROTATELEFT({B, true}, false, false); }
uint8_t SM83::RLC_C() { return ROTATELEFT({C, true}, false, false); }
uint8_t SM83::RLC_D() { return ROTATELEFT({D, true}, false, false); }
uint8_t SM83::RLC_E() { return ROTATELEFT({E, true}, false, false); }
uint8_t SM83::RLC_H() { return ROTATELEFT({H, true}, false, false); }
uint8_t SM83::RLC_L() { return ROTATELEFT({L, true}, false, false); }
uint8_t SM83::RLC_aHL() { return ROTATELEFT({HL, false}, false, false); }
uint8_t SM83::RLC_A() { return ROTATELEFT({A, true}, false, false); }
uint8_t SM83::RRC_B() { return ROTATELEFT({B, true}, true, false); }
uint8_t SM83::RRC_C() { return ROTATELEFT({C, true}, true, false); }
uint8_t SM83::RRC_D() { return ROTATELEFT({D, true}, true, false); }
uint8_t SM83::RRC_E() { return ROTATELEFT({E, true}, true, false); }
uint8_t SM83::RRC_H() { return ROTATELEFT({H, true}, true, false); }
uint8_t SM83::RRC_L() { return ROTATELEFT({L, true}, true, false); }
uint8_t SM83::RRC_aHL() { return ROTATELEFT({HL, false}, true, false); }
uint8_t SM83::RRC_A() { return ROTATELEFT({A, true}, true, false); }
uint8_t SM83::RL_B() { return ROTATELEFT({B, true}, false, true); }
uint8_t SM83::RL_C() { return ROTATELEFT({C, true}, false, true); }
uint8_t SM83::RL_D() { return ROTATELEFT({D, true}, false, true); }
uint8_t SM83::RL_E() { return ROTATELEFT({E, true}, false, true); }
uint8_t SM83::RL_H() { return ROTATELEFT({H, true}, false, true); }
uint8_t SM83::RL_L() { return ROTATELEFT({L, true}, false, true); }
uint8_t SM83::RL_aHL() { return ROTATELEFT({HL, false}, false, true); }
uint8_t SM83::RL_A() { return ROTATELEFT({A, true}, false, true); }
uint8_t SM83::RR_B() { return ROTATELEFT({B, true}, true, true); }
uint8_t SM83::RR_C() { return ROTATELEFT({C, true}, true, true); }
uint8_t SM83::RR_D() { return ROTATELEFT({D, true}, true, true); }
uint8_t SM83::RR_E() { return ROTATELEFT({E, true}, true, true); }
uint8_t SM83::RR_H() { return ROTATELEFT({H, true}, true, true); }
uint8_t SM83::RR_L() { return ROTATELEFT({L, true}, true, true); }
uint8_t SM83::RR_aHL() { return ROTATELEFT({HL, false}, true, true); }
uint8_t SM83::RR_A() { return ROTATELEFT({A, true}, true, true); }
uint8_t SM83::SLA_B() { return SHIFTLEFT({B, true}, false, false); }
uint8_t SM83::SLA_C() { return SHIFTLEFT({C, true}, false, false); }
uint8_t SM83::SLA_D() { return SHIFTLEFT({D, true}, false, false); }
uint8_t SM83::SLA_E() { return SHIFTLEFT({E, true}, false, false); }
uint8_t SM83::SLA_H() { return SHIFTLEFT({H, true}, false, false); }
uint8_t SM83::SLA_L() { return SHIFTLEFT({L, true}, false, false); }
uint8_t SM83::SLA_aHL() { return SHIFTLEFT({HL, false}, false, false); }
uint8_t SM83::SLA_A() { return SHIFTLEFT({A, true}, false, false); }
uint8_t SM83::SRA_B() { return SHIFTLEFT({B, true}, true, false); }
uint8_t SM83::SRA_C() { return SHIFTLEFT({C, true}, true, false); }
uint8_t SM83::SRA_D() { return SHIFTLEFT({D, true}, true, false); }
uint8_t SM83::SRA_E() { return SHIFTLEFT({E, true}, true, false); }
uint8_t SM83::SRA_H() { return SHIFTLEFT({H, true}, true, false); }
uint8_t SM83::SRA_L() { return SHIFTLEFT({L, true}, true, false); }
uint8_t SM83::SRA_aHL() { return SHIFTLEFT({HL, false}, true, false); }
uint8_t SM83::SRA_A() { return SHIFTLEFT({A, true}, true, false); }
uint8_t SM83::SWAP_B() { return SWAP({B, true}); }
uint8_t SM83::SWAP_C() { return SWAP({C, true}); }
uint8_t SM83::SWAP_D() { return SWAP({D, true}); }
uint8_t SM83::SWAP_E() { return SWAP({E, true}); }
uint8_t SM83::SWAP_H() { return SWAP({H, true}); }
uint8_t SM83::SWAP_L() { return SWAP({L, true}); }
uint8_t SM83::SWAP_aHL() { return SWAP({HL, false}); }
uint8_t SM83::SWAP_A() { return SWAP({A, true}); }
uint8_t SM83::SRL_B() { return SHIFTLEFT({B, true}, true, true); }
uint8_t SM83::SRL_C() { return SHIFTLEFT({C, true}, true, true); }
uint8_t SM83::SRL_D() { return SHIFTLEFT({D, true}, true, true); }
uint8_t SM83::SRL_E() { return SHIFTLEFT({E, true}, true, true); }
uint8_t SM83::SRL_H() { return SHIFTLEFT({H, true}, true, true); }
uint8_t SM83::SRL_L() { return SHIFTLEFT({L, true}, true, true); }
uint8_t SM83::SRL_aHL() { return SHIFTLEFT({HL, false}, true, true); }
uint8_t SM83::SRL_A() { return SHIFTLEFT({A, true}, true, true); }
uint8_t SM83::BIT_0_B() { return BIT(0, {B, true}); }
uint8_t SM83::BIT_0_C() { return BIT(0, {C, true}); }
uint8_t SM83::BIT_0_D() { return BIT(0, {D, true}); }
uint8_t SM83::BIT_0_E() { return BIT(0, {E, true}); }
uint8_t SM83::BIT_0_H() { return BIT(0, {H, true}); }
uint8_t SM83::BIT_0_L() { return BIT(0, {L, true}); }
uint8_t SM83::BIT_0_aHL() { return BIT(0, {HL, false}); }
uint8_t SM83::BIT_0_A() { return BIT(0, {A, true}); }
uint8_t SM83::BIT_1_B() { return BIT(1, {B, true}); }
uint8_t SM83::BIT_1_C() { return BIT(1, {C, true}); }
uint8_t SM83::BIT_1_D() { return BIT(1, {D, true}); }
uint8_t SM83::BIT_1_E() { return BIT(1, {E, true}); }
uint8_t SM83::BIT_1_H() { return BIT(1, {H, true}); }
uint8_t SM83::BIT_1_L() { return BIT(1, {L, true}); }
uint8_t SM83::BIT_1_aHL() { return BIT(1, {HL, false}); }
uint8_t SM83::BIT_1_A() { return BIT(1, {A, true}); }
uint8_t SM83::BIT_2_B() { return BIT(2, {B, true}); }
uint8_t SM83::BIT_2_C() { return BIT(2, {C, true}); }
uint8_t SM83::BIT_2_D() { return BIT(2, {D, true}); }
uint8_t SM83::BIT_2_E() { return BIT(2, {E, true}); }
uint8_t SM83::BIT_2_H() { return BIT(2, {H, true}); }
uint8_t SM83::BIT_2_L() { return BIT(2, {L, true}); }
uint8_t SM83::BIT_2_aHL() { return BIT(2, {HL, false}); }
uint8_t SM83::BIT_2_A() { return BIT(2, {A, true}); }
uint8_t SM83::BIT_3_B() { return BIT(3, {B, true}); }
uint8_t SM83::BIT_3_C() { return BIT(3, {C, true}); }
uint8_t SM83::BIT_3_D() { return BIT(3, {D, true}); }
uint8_t SM83::BIT_3_E() { return BIT(3, {E, true}); }
uint8_t SM83::BIT_3_H() { return BIT(3, {H, true}); }
uint8_t SM83::BIT_3_L() { return BIT(3, {L, true}); }
uint8_t SM83::BIT_3_aHL() { return BIT(3, {HL, false}); }
uint8_t SM83::BIT_3_A() { return BIT(3, {A, true}); }
uint8_t SM83::BIT_4_B() { return BIT(4, {B, true}); }
uint8_t SM83::BIT_4_C() { return BIT(4, {C, true}); }
uint8_t SM83::BIT_4_D() { return BIT(4, {D, true}); }
uint8_t SM83::BIT_4_E() { return BIT(4, {E, true}); }
uint8_t SM83::BIT_4_H() { return BIT(4, {H, true}); }
uint8_t SM83::BIT_4_L() { return BIT(4, {L, true}); }
uint8_t SM83::BIT_4_aHL() { return BIT(4, {HL, false}); }
uint8_t SM83::BIT_4_A() { return BIT(4, {A, true}); }
uint8_t SM83::BIT_5_B() { return BIT(5, {B, true}); }
uint8_t SM83::BIT_5_C() { return BIT(5, {C, true}); }
uint8_t SM83::BIT_5_D() { return BIT(5, {D, true}); }
uint8_t SM83::BIT_5_E() { return BIT(5, {E, true}); }
uint8_t SM83::BIT_5_H() { return BIT(5, {H, true}); }
uint8_t SM83::BIT_5_L() { return BIT(5, {L, true}); }
uint8_t SM83::BIT_5_aHL() { return BIT(5, {HL, false}); }
uint8_t SM83::BIT_5_A() { return BIT(5, {A, true}); }
uint8_t SM83::BIT_6_B() { return BIT(6, {B, true}); }
uint8_t SM83::BIT_6_C() { return BIT(6, {C, true}); }
uint8_t SM83::BIT_6_D() { return BIT(6, {D, true}); }
uint8_t SM83::BIT_6_E() { return BIT(6, {E, true}); }
uint8_t SM83::BIT_6_H() { return BIT(6, {H, true}); }
uint8_t SM83::BIT_6_L() { return BIT(6, {L, true}); }
uint8_t SM83::BIT_6_aHL() { return BIT(6, {HL, false}); }
uint8_t SM83::BIT_6_A() { return BIT(6, {A, true}); }
uint8_t SM83::BIT_7_B() { return BIT(7, {B, true}); }
uint8_t SM83::BIT_7_C() { return BIT(7, {C, true}); }
uint8_t SM83::BIT_7_D() { return BIT(7, {D, true}); }
uint8_t SM83::BIT_7_E() { return BIT(7, {E, true}); }
uint8_t SM83::BIT_7_H() { return BIT(7, {H, true}); }
uint8_t SM83::BIT_7_L() { return BIT(7, {L, true}); }
uint8_t SM83::BIT_7_aHL() { return BIT(7, {HL, false}); }
uint8_t SM83::BIT_7_A() { return BIT(7, {A, true}); }
uint8_t SM83::RES_0_B() { return RES(0, {B, true}); }
uint8_t SM83::RES_0_C() { return RES(0, {C, true}); }
uint8_t SM83::RES_0_D() { return RES(0, {D, true}); }
uint8_t SM83::RES_0_E() { return RES(0, {E, true}); }
uint8_t SM83::RES_0_H() { return RES(0, {H, true}); }
uint8_t SM83::RES_0_L() { return RES(0, {L, true}); }
uint8_t SM83::RES_0_aHL() { return RES(0, {HL, false}); }
uint8_t SM83::RES_0_A() { return RES(0, {A, true}); }
uint8_t SM83::RES_1_B() { return RES(1, {B, true}); }
uint8_t SM83::RES_1_C() { return RES(1, {C, true}); }
uint8_t SM83::RES_1_D() { return RES(1, {D, true}); }
uint8_t SM83::RES_1_E() { return RES(1, {E, true}); }
uint8_t SM83::RES_1_H() { return RES(1, {H, true}); }
uint8_t SM83::RES_1_L() { return RES(1, {L, true}); }
uint8_t SM83::RES_1_aHL() { return RES(1, {HL, false}); }
uint8_t SM83::RES_1_A() { return RES(1, {A, true}); }
uint8_t SM83::RES_2_B() { return RES(2, {B, true}); }
uint8_t SM83::RES_2_C() { return RES(2, {C, true}); }
uint8_t SM83::RES_2_D() { return RES(2, {D, true}); }
uint8_t SM83::RES_2_E() { return RES(2, {E, true}); }
uint8_t SM83::RES_2_H() { return RES(2, {H, true}); }
uint8_t SM83::RES_2_L() { return RES(2, {L, true}); }
uint8_t SM83::RES_2_aHL() { return RES(2, {HL, false}); }
uint8_t SM83::RES_2_A() { return RES(2, {A, true}); }
uint8_t SM83::RES_3_B() { return RES(3, {B, true}); }
uint8_t SM83::RES_3_C() { return RES(3, {C, true}); }
uint8_t SM83::RES_3_D() { return RES(3, {D, true}); }
uint8_t SM83::RES_3_E() { return RES(3, {E, true}); }
uint8_t SM83::RES_3_H() { return RES(3, {H, true}); }
uint8_t SM83::RES_3_L() { return RES(3, {L, true}); }
uint8_t SM83::RES_3_aHL() { return RES(3, {HL, false}); }
uint8_t SM83::RES_3_A() { return RES(3, {A, true}); }
uint8_t SM83::RES_4_B() { return RES(4, {B, true}); }
uint8_t SM83::RES_4_C() { return RES(4, {C, true}); }
uint8_t SM83::RES_4_D() { return RES(4, {D, true}); }
uint8_t SM83::RES_4_E() { return RES(4, {E, true}); }
uint8_t SM83::RES_4_H() { return RES(4, {H, true}); }
uint8_t SM83::RES_4_L() { return RES(4, {L, true}); }
uint8_t SM83::RES_4_aHL() { return RES(4, {HL, false}); }
uint8_t SM83::RES_4_A() { return RES(4, {A, true}); }
uint8_t SM83::RES_5_B() { return RES(5, {B, true}); }
uint8_t SM83::RES_5_C() { return RES(5, {C, true}); }
uint8_t SM83::RES_5_D() { return RES(5, {D, true}); }
uint8_t SM83::RES_5_E() { return RES(5, {E, true}); }
uint8_t SM83::RES_5_H() { return RES(5, {H, true}); }
uint8_t SM83::RES_5_L() { return RES(5, {L, true}); }
uint8_t SM83::RES_5_aHL() { return RES(5, {HL, false}); }
uint8_t SM83::RES_5_A() { return RES(5, {A, true}); }
uint8_t SM83::RES_6_B() { return RES(6, {B, true}); }
uint8_t SM83::RES_6_C() { return RES(6, {C, true}); }
uint8_t SM83::RES_6_D() { return RES(6, {D, true}); }
uint8_t SM83::RES_6_E() { return RES(6, {E, true}); }
uint8_t SM83::RES_6_H() { return RES(6, {H, true}); }
uint8_t SM83::RES_6_L() { return RES(6, {L, true}); }
uint8_t SM83::RES_6_aHL() { return RES(6, {HL, false}); }
uint8_t SM83::RES_6_A() { return RES(6, {A, true}); }
uint8_t SM83::RES_7_B() { return RES(7, {B, true}); }
uint8_t SM83::RES_7_C() { return RES(7, {C, true}); }
uint8_t SM83::RES_7_D() { return RES(7, {D, true}); }
uint8_t SM83::RES_7_E() { return RES(7, {E, true}); }
uint8_t SM83::RES_7_H() { return RES(7, {H, true}); }
uint8_t SM83::RES_7_L() { return RES(7, {L, true}); }
uint8_t SM83::RES_7_aHL() { return RES(7, {HL, false}); }
uint8_t SM83::RES_7_A() { return RES(7, {A, true}); }
uint8_t SM83::SET_0_B() { return SET(0, {B, true}); }
uint8_t SM83::SET_0_C() { return SET(0, {C, true}); }
uint8_t SM83::SET_0_D() { return SET(0, {D, true}); }
uint8_t SM83::SET_0_E() { return SET(0, {E, true}); }
uint8_t SM83::SET_0_H() { return SET(0, {H, true}); }
uint8_t SM83::SET_0_L() { return SET(0, {L, true}); }
uint8_t SM83::SET_0_aHL() { return SET(0, {HL, false}); }
uint8_t SM83::SET_0_A() { return SET(0, {A, true}); }
uint8_t SM83::SET_1_B() { return SET(1, {B, true}); }
uint8_t SM83::SET_1_C() { return SET(1, {C, true}); }
uint8_t SM83::SET_1_D() { return SET(1, {D, true}); }
uint8_t SM83::SET_1_E() { return SET(1, {E, true}); }
uint8_t SM83::SET_1_H() { return SET(1, {H, true}); }
uint8_t SM83::SET_1_L() { return SET(1, {L, true}); }
uint8_t SM83::SET_1_aHL() { return SET(1, {HL, false}); }
uint8_t SM83::SET_1_A() { return SET(1, {A, true}); }
uint8_t SM83::SET_2_B() { return SET(2, {B, true}); }
uint8_t SM83::SET_2_C() { return SET(2, {C, true}); }
uint8_t SM83::SET_2_D() { return SET(2, {D, true}); }
uint8_t SM83::SET_2_E() { return SET(2, {E, true}); }
uint8_t SM83::SET_2_H() { return SET(2, {H, true}); }
uint8_t SM83::SET_2_L() { return SET(2, {L, true}); }
uint8_t SM83::SET_2_aHL() { return SET(2, {HL, false}); }
uint8_t SM83::SET_2_A() { return SET(2, {A, true}); }
uint8_t SM83::SET_3_B() { return SET(3, {B, true}); }
uint8_t SM83::SET_3_C() { return SET(3, {C, true}); }
uint8_t SM83::SET_3_D() { return SET(3, {D, true}); }
uint8_t SM83::SET_3_E() { return SET(3, {E, true}); }
uint8_t SM83::SET_3_H() { return SET(3, {H, true}); }
uint8_t SM83::SET_3_L() { return SET(3, {L, true}); }
uint8_t SM83::SET_3_aHL() { return SET(3, {HL, false}); }
uint8_t SM83::SET_3_A() { return SET(3, {A, true}); }
uint8_t SM83::SET_4_B() { return SET(4, {B, true}); }
uint8_t SM83::SET_4_C() { return SET(4, {C, true}); }
uint8_t SM83::SET_4_D() { return SET(4, {D, true}); }
uint8_t SM83::SET_4_E() { return SET(4, {E, true}); }
uint8_t SM83::SET_4_H() { return SET(4, {H, true}); }
uint8_t SM83::SET_4_L() { return SET(4, {L, true}); }
uint8_t SM83::SET_4_aHL() { return SET(4, {HL, false}); }
uint8_t SM83::SET_4_A() { return SET(4, {A, true}); }
uint8_t SM83::SET_5_B() { return SET(5, {B, true}); }
uint8_t SM83::SET_5_C() { return SET(5, {C, true}); }
uint8_t SM83::SET_5_D() { return SET(5, {D, true}); }
uint8_t SM83::SET_5_E() { return SET(5, {E, true}); }
uint8_t SM83::SET_5_H() { return SET(5, {H, true}); }
uint8_t SM83::SET_5_L() { return SET(5, {L, true}); }
uint8_t SM83::SET_5_aHL() { return SET(5, {HL, false}); }
uint8_t SM83::SET_5_A() { return SET(5, {A, true}); }
uint8_t SM83::SET_6_B() { return SET(6, {B, true}); }
uint8_t SM83::SET_6_C() { return SET(6, {C, true}); }
uint8_t SM83::SET_6_D() { return SET(6, {D, true}); }
uint8_t SM83::SET_6_E() { return SET(6, {E, true}); }
uint8_t SM83::SET_6_H() { return SET(6, {H, true}); }
uint8_t SM83::SET_6_L() { return SET(6, {L, true}); }
uint8_t SM83::SET_6_aHL() { return SET(6, {HL, false}); }
uint8_t SM83::SET_6_A() { return SET(6, {A, true}); }
uint8_t SM83::SET_7_B() { return SET(7, {B, true}); }
uint8_t SM83::SET_7_C() { return SET(7, {C, true}); }
uint8_t SM83::SET_7_D() { return SET(7, {D, true}); }
uint8_t SM83::SET_7_E() { return SET(7, {E, true}); }
uint8_t SM83::SET_7_H() { return SET(7, {H, true}); }
uint8_t SM83::SET_7_L() { return SET(7, {L, true}); }
uint8_t SM83::SET_7_aHL() { return SET(7, {HL, false}); }
uint8_t SM83::SET_7_A() { return SET(7, {A, true}); }
